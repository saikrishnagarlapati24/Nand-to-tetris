// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Sys.jack

/**
 * A library that supports various program execution services.
 */
class Sys {

    /** Performs all the initializations required by the OS. */
    function void init() {
        do Memory.init();
        do Math.init();
        do Screen.init();
        do Output.init();
        do KeyBoard.init();//I think the order of init functions does not matter. But main function must be called only after the init functions.
        do Main.main();
        do Sys.halt();
        return;
    }

    /** Halts the program execution. */
    function void halt() {
        while(true){
        }
        return;
    }

    /** Waits approximately duration milliseconds and returns.  */
    function void wait(int duration) {
        var int i, j;
        let i=0;
        while(i< duration){
            let j=0;
            while(j<10000){
                let j=j+1;
            }
        }
        return;
    }

    /** Displays the given error code in the form "ERR<errorCode>",
     *  and halts the program's execution. */
    function void error(int errorCode) {
        do Screen.clearScreen();
        if(errorCode=1){
            do Output.printString("Duration must be positive");
            do Sys.halt();
        }
        if(errorCode=2){
            do Output.printString("Array size must be positive");
            do Sys.halt();
        }
        if(errorCode=3){
            do Output.printString("Division by zero");
            do Sys.halt();
        }
        if(errorCode=4){
            do Output.printString("Cannot compute square root of a negative");
            do Sys.halt();
        }
        if(errorCode=5){
            do Output.printString("Allocated memory size must be positive");
            do Sys.halt();
        }
        if(errorCode=6){
            do Output.printString("Heap overflow");
            do Sys.halt();
        }
        if(errorCode=7){
            do Output.printString("Illegal pixel coordinates");
            do Sys.halt();
        }
        if(errorCode=8){
            do Output.printString("Illegal line coordinates");
            do Sys.halt();
        }
        if(errorCode=9){
            do Output.printString("Illegal rectangle coordinates");
            do Sys.halt();
        }
        if(errorCode=12){
            do Output.printString("Illegal center coordinates");
            do Sys.halt();
        }
        if(errorCode=13){
            do Output.printString("Illegal radius");
            do Sys.halt();
        }
        if(errorCode=14){
            do Output.printString("Maximum length must be non-negative");
            do Sys.halt();
        }
        if(errorCode=15){
            do Output.printString("String index out of bounds");
            do Sys.halt();
        }
        if(errorCode=16){
            do Output.printString("String index out of bounds");
            do Sys.halt();
        }
        if(errorCode=17){
            do Output.printString("String is full");
            do Sys.halt();
        }
        if(errorCode=18){
            do Output.printString("String is empty");
            do Sys.halt();
        }
        if(errorCode=19){
            do Output.printString("Insufficient string capacity");
            do Sys.halt();
        }
        if(errorCode=20){
            do Output.printString("Illegal cursor location");
            do Sys.halt();
        }
        return;
    }
}
