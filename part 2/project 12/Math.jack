// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static array twoToThe;
    //We cannot declare it as a field as there will be objects of math class. So there won't be 'this i' for that array variable(think of compilation).
    //And most importantly 'functions' won't be able to see them.
    
    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = -32767;
        let twoToThe[15] = twoToThe[15]-1;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x<0){
            return -x;
        }
        else{
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedx, i;
        let sum=0;
        let i=0;
        let shiftedx=x;
        while(i<16){
            if((y & twoToThe[i]) = twoToThe[i]){
                let sum=sum+shiftedx;
            }
            let shiftedx=shiftedx + shiftedx;
            let i = i+1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        //This solution I am going to implement for the division to handle overflow and negative numbers, is after a brainstorming. Refer to
        //my nabble post in project 12 to know what problems I faced first.
        var int absx, absy;
        var int q;
        if(y=0){
            do Sys.error(3);
            return 0;
        }
        else{
            let absx=Math.abs(x);//to handle negative numbers
            let absy=Math.abs(y);

            if(absy>absx){//If I include the condition also for y<0 here only to counter the overflow problem, then if the input itself by the compiler is negative then it will wrongly return 0.
                return 0;
            }
            else{
                if( (absy+absy) < 0){//to handle overflow(using 2*absy would be less efficient). Checking here only if 2*asby overflows, before calling divide recursivley
                    if( ((x>0) & (y>0)) | ((x<0) & (y<0)) ){
                        return 1;
                    }
                    else{
                        return -1;
                    }
                }
                else{//if it does not overflow then only call the function recursively.
                    let q = Math.divide(absx, absy+absy);
                    if((absx-((q*absy) + (q*absy))) < absy){
                        if( ((x>0) & (y>0)) | ((x<0) & (y<0)) ){
                            return q+q;
                        }
                        else{
                            return -(q+q);
                        }
                    }
                    else{
                        if( ((x>0) & (y>0)) | ((x<0) & (y<0)) ){
                            return q+q+1;
                        }
                        else{
                            return -(q+q+1);
                        }
                    }
                }
            }
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {//x must be a positive number
        var int j, rt, a;
        if(x<0){
            do Sys.error(4);
            return 0;
        }
        else{
            let j=7;
            let rt=0;
            while(j>-1){
                let a = (rt+twoToThe[j])*(rt+twoToThe[j]);//This will be more efficient than computing the same expression twice.
                if( ((a<x)|(a-x=0)) & (a>0) ){
                    let rt=rt+twoToThe[j];
                }
                let j=j-1;
            }
            return rt;
        }
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a>b){
            return a;
        }
        else{
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a<b){
            return a;
        }
        else{
            return b;
        }
    }
}
