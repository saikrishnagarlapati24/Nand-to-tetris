// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int max;//It should not be static since it is string specific.
    field Array str;
    field int pos;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {//constructor allocates meory for the fields. But the length of the string is given as a parameter by the user.
        //When the constructor is called, by the duty of the compiler, a memory of size of no. of fields is allocated. And unlike other constructors, we, here should 
        //not return 'this'. Since that is not where the array of characters of the string starts.
        //Also we may be tempted to allocating the memory for the string of size=maxlength just after 'this'. But we don't know what is already residing
        //just after the 'this'. So, it is better to construct an array of length=maxlength and return that array's pointer.
        //But then if we have any fields, then accessing them while compiling needs 'this'. So, if we have to have any fields, we need to return 'this'
        //only through the constructor. This needs some thinking effort. 
        //This is similar to array handling.
        if(maxLength<0){
            do Sys.error(14);
        }
        if(maxLength>0){
            let str=Array.new(maxLength); //this is string's data array which is not what 'this' indicates in the return statement.
        }
        else{
            let str=null;
        }
        let max=maxLength;
        let pos= -1;//pos: [0, maxlength-1]
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if(max>0){
            do Memory.dealloc(str);
        }
        do Memory.dealloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return pos+1;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if(j>pos){
            do Sys.error(15);
            return 33;
        }
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {//j<=pos
        if(j>pos){
            do Sys.error(16);
        }
        else{
            let str[j]=c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(pos<(max-1)){
            let pos=pos+1;
            let str[pos]=c;
        }
        else{
            do Sys.error(17);
        }
        return this;//We have to modify the string object and pass its pointer. This is used in compiler.
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(pos>0){
            let pos=pos-1;
        }
        else{
            do Sys.error(18);
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, n;
        let n=0;
        if(str[0]=45){
            let i=1;
        }
        else{
            let i=0;
        }
        while(i<(pos+1)){
            if((str[i]<58) & (str[i]>47)){
                let n= n*10+ (str[i]-48);
                let i=i+1;
            }
            else{
                if(str[0]=45){
                    return -n;
                }
                else{
                    return n;
                }
            }
        }
        return n;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var boolean s;
        var int k;
        let pos= -1;
        let s= false;
        if(val<0){
            do appendChar(45);
            if(val < -32767){
                do appendChar(51);
                do appendChar(50);
                do appendChar(55);
                do appendChar(54);
                do appendChar(56);
                return;
            }
            else{
                let val= -val;
            }
        }
        let k= Math.divide(val, 10000);
        if(~(k=0) | (s)){
            if(pos+1 = max){
                do Sys.error(19);
                return;
            }
            do appendChar(k+48);
            let s= true;
            let val= val- (k*10000);
        }
        let k= Math.divide(val, 1000);
        if(~(k=0) | (s)){
            if(pos+1 = max){
                do Sys.error(19);
                return;
            }
            do appendChar(k+48);
            let s= true;
            let val= val- (k*1000);
        }
        let k= Math.divide(val, 100);
        if(~(k=0) | (s)){
            if(pos+1 = max){
                do Sys.error(19);
                return;
            }
            do appendChar(k+48);
            let s= true;
            let val= val- (k*100);
        }
        let k= Math.divide(val, 10);
        if(~(k=0) | (s)){
            if(pos+1 = max){
                do Sys.error(19);
                return;
            }
            do appendChar(k+48);
            let s= true;
            let val= val- (k*10);
        }
        if(pos+1 = max){
                do Sys.error(19);
                return;
            }
        do appendChar(val+48);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {//this is backspace character.
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
