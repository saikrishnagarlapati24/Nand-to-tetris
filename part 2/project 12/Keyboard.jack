// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    static int kb;
    /** Initializes the keyboard. */
    function void init() {
        let kb= 24576;
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        //var int c;
        // let c=kb[0];
        // if(~(c=0)){
        //     return c;
        // }
        // else{
        //     return 0;
        // }
        return kb[0];
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {//Implementing only to echo the printable characters. I think arrows will be used for game controls etc and other action characters are upto the programmer what to do with the other actions.
        var char c;           //I have implemented readChar to print only those that can be part of string literals.(I have taken a screenshot of a related nabble post too by Cadet)
        let c=0;
        while(c=0){
            let c=Keyboard.keyPressed();
        }
        while(~(Keyboard.keyPressed()=0)){
        }
        do Output.printChar(c);//This will only print printable characters
        return c;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {//This handles newline and backspaces. So far I haven't implement 'delete'.
        var char c; 
        var String s;
        let s= String.new(64);
        do Output.printString(message);
        let c= Keyboard.readChar();
        while(~(c=128)){
            if(c=129){
                do s.eraseLastChar();
                do Output.backSpace();
            }
            else{
                let s= s.appendChar(c);
            }
            let c= Keyboard.readChar();
        }
        return s;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var char c;
        var String s;
        do Output.printString(message);
        let s= String.new(6);
        let c= Keyboard.readChar();
        while(~(c=128)){
            let s= s.appendchar(c);
            let c= Keyboard.readChar();
        }
        return s.intValue();
        // do c= Keyboard.readChar();
        // if(c=45){
        //     let neg=true;
        // }
        // else{
        //     while((c>47)&(c<58) ){
        //         let n=n+(c+48)*10;
        //         let c= Keyboard.readChar();
        //     }
        //     if()
        // }
    }
}
