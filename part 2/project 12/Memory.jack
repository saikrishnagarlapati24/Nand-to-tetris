// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array freelist;//here the type does not matter since jack is weakly typed. It can be an int too.

    /** Initializes the class. */
    function void init() {
        let ram=0;//This variable itself will be created in the static variables section of the RAM when this init function is called by sys.init.
        //let heap=2048; I think we can do witout heap variable at all too.
        let freelist = 2048;//freelist and freelist[0] are not the same. freelist(is a pointer) sets the base address of the array and freelist[0] sets the first element of the array.
        let freelist[0]=null;
        let freelist[1]=14334;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];//This is using an array without construction. Compiler will not complain.(Explained in the module too)
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address]=value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array segment;
        var Array block;
        if(size<1){
            do Sys.error(5);
            return 16384;//24576;
        }
        let segment=freelist;//segment is also a pointer just like free list.
        while(~(segment=null)){
            if(segment[1]>(size+1)){//>=size+2
                let block=segment+segment[1]+2-size;
                let block[-1]=size;
                let block[-2]=null;
                let segment[1]=segment[1]-(size+2);
                return block;
            }
            else{
                let segment=segment[0];//segment[i]=*(segment+i)
            }
        }
        if(segment=null){
            do Sys.error(6);
            return 16384;
        }
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array segment;
        if(freelist=null){
            let freelist=o-2;
        }
        else{
            let segment=freelist;
            while(~(segment[0]=null)){
                let segment=segment[0];
            }
            if(segment[0]=null){
                let segment[0]=o-2;
            }
        } 
        return;   
    }

    //due to time constraint I am not able to implement defragmentor.
}
