//bootstrapcode 
@256 
D=A 
@SP 
M=D 
@$ret.0 
D=A 
@SP 
AM=M+1 
A=A-1 
M=D 
@LCL 
D=M 
@SP 
AM=M+1 
A=A-1 
M=D 
@ARG 
D=M 
@SP 
AM=M+1 
A=A-1 
M=D 
@THIS 
D=M 
@SP 
AM=M+1 
A=A-1 
M=D 
@THAT 
D=M 
@SP 
AM=M+1 
A=A-1 
M=D 
@5 
D=A 
@0 
D=D+A 
@SP 
D=M-D 
@ARG 
M=D 
@SP 
D=M 
@LCL 
M=D 
@Sys.init 
0;JMP 
($ret.0) 
//functionMain.fibonacci0
(Main.fibonacci) 
@R13 
M=0 
(Main.fibonacciLCL) 
@R13 
D=M 
@0 
D=D-A 
@Main.fibonacciLCLEND 
D;JGE 
@R13 
MD=M+1 
D=D-1 
@LCL 
A=M+D 
M=0 
@Main.fibonacciLCL 
0;JMP 
(Main.fibonacciLCLEND) 
@LCL 
D=M 
@0 
D=D+A 
@SP 
M=D 
//pushargument0
@ARG 
D=M 
@0 
A=D+A 
D=M 
@SP 
AM=M+1 
A=A-1 
M=D 
//pushconstant2
@2 
D=A 
@SP 
AM=M+1 
A=A-1 
M=D 
//lt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@LT1 
D;JGT 
@SP 
A=M-1 
M=0 
@OVLT1 
0,JMP 
(LT1) 
@SP 
A=M-1 
M=-1 
(OVLT1) 
//if-gotoIF_TRUE
@SP 
AM=M-1 
D=M 
@Main.fibonacci$IF_TRUE 
D,JNE 
//gotoIF_FALSE
@Main.fibonacci$IF_FALSE 
0;JMP 
//labelIF_TRUE
(Main.fibonacci$IF_TRUE) 
//pushargument0
@ARG 
D=M 
@0 
A=D+A 
D=M 
@SP 
AM=M+1 
A=A-1 
M=D 
//return
@LCL 
D=M 
@endframe 
M=D 
@5 
D=A 
@endframe 
A=M-D 
D=M 
@retaddr 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@1 
D=A 
@endframe 
A=M-D 
D=M 
@THAT 
M=D 
@2 
D=A 
@endframe 
A=M-D 
D=M 
@THIS 
M=D 
@3 
D=A 
@endframe 
A=M-D 
D=M 
@ARG 
M=D 
@4 
D=A 
@endframe 
A=M-D 
D=M 
@LCL 
M=D 
@retaddr 
A=M 
0;JMP 
//labelIF_FALSE
(Main.fibonacci$IF_FALSE) 
//pushargument0
@ARG 
D=M 
@0 
A=D+A 
D=M 
@SP 
AM=M+1 
A=A-1 
M=D 
//pushconstant2
@2 
D=A 
@SP 
AM=M+1 
A=A-1 
M=D 
//sub
@SP 
AM=M-1 
D=M 
A=A-1 
M=M-D 
//callMain.fibonacci1
@Main.fibonacci$ret.1 
D=A 
@SP 
AM=M+1 
A=A-1 
M=D 
@LCL 
D=M 
@SP 
AM=M+1 
A=A-1 
M=D 
@ARG 
D=M 
@SP 
AM=M+1 
A=A-1 
M=D 
@THIS 
D=M 
@SP 
AM=M+1 
A=A-1 
M=D 
@THAT 
D=M 
@SP 
AM=M+1 
A=A-1 
M=D 
@5 
D=A 
@1 
D=D+A 
@SP 
D=M-D 
@ARG 
M=D 
@SP 
D=M 
@LCL 
M=D 
@Main.fibonacci 
0;JMP 
(Main.fibonacci$ret.1) 
//pushargument0
@ARG 
D=M 
@0 
A=D+A 
D=M 
@SP 
AM=M+1 
A=A-1 
M=D 
//pushconstant1
@1 
D=A 
@SP 
AM=M+1 
A=A-1 
M=D 
//sub
@SP 
AM=M-1 
D=M 
A=A-1 
M=M-D 
//callMain.fibonacci1
@Main.fibonacci$ret.2 
D=A 
@SP 
AM=M+1 
A=A-1 
M=D 
@LCL 
D=M 
@SP 
AM=M+1 
A=A-1 
M=D 
@ARG 
D=M 
@SP 
AM=M+1 
A=A-1 
M=D 
@THIS 
D=M 
@SP 
AM=M+1 
A=A-1 
M=D 
@THAT 
D=M 
@SP 
AM=M+1 
A=A-1 
M=D 
@5 
D=A 
@1 
D=D+A 
@SP 
D=M-D 
@ARG 
M=D 
@SP 
D=M 
@LCL 
M=D 
@Main.fibonacci 
0;JMP 
(Main.fibonacci$ret.2) 
//add
@SP 
AM=M-1 
D=M 
A=A-1 
M=D+M 
//return
@LCL 
D=M 
@endframe 
M=D 
@5 
D=A 
@endframe 
A=M-D 
D=M 
@retaddr 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@1 
D=A 
@endframe 
A=M-D 
D=M 
@THAT 
M=D 
@2 
D=A 
@endframe 
A=M-D 
D=M 
@THIS 
M=D 
@3 
D=A 
@endframe 
A=M-D 
D=M 
@ARG 
M=D 
@4 
D=A 
@endframe 
A=M-D 
D=M 
@LCL 
M=D 
@retaddr 
A=M 
0;JMP 
//functionSys.init0
(Sys.init) 
@R13 
M=0 
(Sys.initLCL) 
@R13 
D=M 
@0 
D=D-A 
@Sys.initLCLEND 
D;JGE 
@R13 
MD=M+1 
D=D-1 
@LCL 
A=M+D 
M=0 
@Sys.initLCL 
0;JMP 
(Sys.initLCLEND) 
@LCL 
D=M 
@0 
D=D+A 
@SP 
M=D 
//pushconstant4
@4 
D=A 
@SP 
AM=M+1 
A=A-1 
M=D 
//callMain.fibonacci1
@Sys.init$ret.1 
D=A 
@SP 
AM=M+1 
A=A-1 
M=D 
@LCL 
D=M 
@SP 
AM=M+1 
A=A-1 
M=D 
@ARG 
D=M 
@SP 
AM=M+1 
A=A-1 
M=D 
@THIS 
D=M 
@SP 
AM=M+1 
A=A-1 
M=D 
@THAT 
D=M 
@SP 
AM=M+1 
A=A-1 
M=D 
@5 
D=A 
@1 
D=D+A 
@SP 
D=M-D 
@ARG 
M=D 
@SP 
D=M 
@LCL 
M=D 
@Main.fibonacci 
0;JMP 
(Sys.init$ret.1) 
//labelWHILE
(Sys.init$WHILE) 
//gotoWHILE
@Sys.init$WHILE 
0;JMP 
