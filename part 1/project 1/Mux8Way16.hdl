// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux8Way16.hdl

/**
 * 8-way 16-bit multiplexor:
 * out = a if sel == 000
 *       b if sel == 001
 *       etc.
 *       h if sel == 111
 */

CHIP Mux8Way16 {
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16];

    PARTS:
    // Put your code here
Not16(in[0]=sel[0],in[1]=sel[0],in[2]=sel[0],in[3]=sel[0],in[4]=sel[0],in[5]=sel[0],in[6]=sel[0],in[7]=sel[0],in[8]=sel[0],in[9]=sel[0],in[10]=sel[0],in[11]=sel[0],in[12]=sel[0],in[13]=sel[0],in[14]=sel[0],in[15]=sel[0],out=nsobus);

Not16(in[0]=sel[1],in[1]=sel[1],in[2]=sel[1],in[3]=sel[1],in[4]=sel[1],in[5]=sel[1],in[6]=sel[1],in[7]=sel[1],in[8]=sel[1],in[9]=sel[1],in[10]=sel[1],in[11]=sel[1],in[12]=sel[1],in[13]=sel[1],in[14]=sel[1],in[15]=sel[1],out=nsibus);

Not16(in[0]=sel[2],in[1]=sel[2],in[2]=sel[2],in[3]=sel[2],in[4]=sel[2],in[5]=sel[2],in[6]=sel[2],in[7]=sel[2],in[8]=sel[2],in[9]=sel[2],in[10]=sel[2],in[11]=sel[2],in[12]=sel[2],in[13]=sel[2],in[14]=sel[2],in[15]=sel[2],out=nstbus);

And16(a[0]=sel[0],a[1]=sel[0],a[2]=sel[0],a[3]=sel[0],a[4]=sel[0],a[5]=sel[0],a[6]=sel[0],a[7]=sel[0],a[8]=sel[0],a[9]=sel[0],a[10]=sel[0],a[11]=sel[0],a[12]=sel[0],a[13]=sel[0],a[14]=sel[0],a[15]=sel[0],b[0]=sel[0],b[1]=sel[0],b[2]=sel[0],b[3]=sel[0],b[4]=sel[0],b[5]=sel[0],b[6]=sel[0],b[7]=sel[0],b[8]=sel[0],b[9]=sel[0],b[10]=sel[0],b[11]=sel[0],b[12]=sel[0],b[13]=sel[0],b[14]=sel[0],b[15]=sel[0],out=sobus);

And16(a[0]=sel[2],a[1]=sel[2],a[2]=sel[2],a[3]=sel[2],a[4]=sel[2],a[5]=sel[2],a[6]=sel[2],a[7]=sel[2],a[8]=sel[2],a[9]=sel[2],a[10]=sel[2],a[11]=sel[2],a[12]=sel[2],a[13]=sel[2],a[14]=sel[2],a[15]=sel[2],b[0]=sel[2],b[1]=sel[2],b[2]=sel[2],b[3]=sel[2],b[4]=sel[2],b[5]=sel[2],b[6]=sel[2],b[7]=sel[2],b[8]=sel[2],b[9]=sel[2],b[10]=sel[2],b[11]=sel[2],b[12]=sel[2],b[13]=sel[2],b[14]=sel[2],b[15]=sel[2],out=stbus);

And16(a[0]=sel[1],a[1]=sel[1],a[2]=sel[1],a[3]=sel[1],a[4]=sel[1],a[5]=sel[1],a[6]=sel[1],a[7]=sel[1],a[8]=sel[1],a[9]=sel[1],a[10]=sel[1],a[11]=sel[1],a[12]=sel[1],a[13]=sel[1],a[14]=sel[1],a[15]=sel[1],b[0]=sel[1],b[1]=sel[1],b[2]=sel[1],b[3]=sel[1],b[4]=sel[1],b[5]=sel[1],b[6]=sel[1],b[7]=sel[1],b[8]=sel[1],b[9]=sel[1],b[10]=sel[1],b[11]=sel[1],b[12]=sel[1],b[13]=sel[1],b[14]=sel[1],b[15]=sel[1],out=sibus);

And16(a=nstbus,b=nsibus,out=x1);
And16(a=nsobus,b=a,out=y1);
And16(a=x1,b=y1,out=out1);

And16(a=nstbus,b=nsibus,out=x2);
And16(a=sobus,b=b,out=y2);
And16(a=x2,b=y2,out=out2);

And16(a=nstbus,b=sibus,out=x3);
And16(a=nsobus,b=c,out=y3);
And16(a=x3,b=y3,out=out3);

And16(a=nstbus,b=sibus,out=x4);
And16(a=sobus,b=d,out=y4);
And16(a=x4,b=y4,out=out4);

And16(a=stbus,b=nsibus,out=x5);
And16(a=nsobus,b=e,out=y5);
And16(a=x5,b=y5,out=out5);

And16(a=stbus,b=nsibus,out=x6);
And16(a=sobus,b=f,out=y6);
And16(a=x6,b=y6,out=out6);

And16(a=stbus,b=sibus,out=x7);
And16(a=nsobus,b=g,out=y7);
And16(a=x7,b=y7,out=out7);

And16(a=stbus,b=sibus,out=x8);
And16(a=sobus,b=h,out=y8);
And16(a=x8,b=y8,out=out8);

Or16(a=out1,b=out2,out=or1);
Or16(a=out3,b=or1,out=or2);
Or16(a=out4,b=or2,out=or3);
Or16(a=out5,b=or3,out=or4);
Or16(a=out6,b=or4,out=or5);
Or16(a=out7,b=or5,out=or6);
Or16(a=out8,b=or6,out=out);

}



