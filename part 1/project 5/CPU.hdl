// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
//Aregister
Mux16(a=instruction ,b=aluout ,sel=instruction[15] ,out=inforA );
Mux(a=true ,b=instruction[5] ,sel=instruction[15] ,out=cforA);
ARegister(in=inforA ,load=cforA ,out=A ,out[0..14]=addressM);

//D register
And(a=instruction[15] ,b=instruction[4] ,out=cforD);
DRegister(in=aluout ,load=cforD ,out= D);

//ALU
Mux16(a=A ,b=inM ,sel=instruction[12] ,out=aluin );
ALU(x=D ,y=aluin ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=aluout ,out=outM ,zr= zr,ng=ng );

//WriteM
And(a=instruction[15] ,b=instruction[3] ,out=writeM);

//pc
Not(in=zr ,out=zrbar);
Not(in=ng ,out=ngbar);
And(a=zr ,b=ngbar ,out=zrngbar);
And(a=zrbar ,b=ng ,out=zrbarng);
And(a=zrbar ,b=ngbar ,out=zrbarngbar);
Xor(a=zr ,b=ng ,out=zrxorng);
Mux(a=false ,b=zrbarngbar ,sel=instruction[0] ,out=w10);
Mux(a=zrngbar ,b=ngbar ,sel=instruction[0] ,out=w11);
Mux(a=zrbarng ,b=zrbar ,sel=instruction[0] ,out=w12 );
Mux(a=zrxorng ,b=true ,sel=instruction[0] ,out=w13 );
Mux(a=w10 ,b=w11 ,sel=instruction[1] ,out=w20 );
Mux(a=w12 ,b=w13 ,sel=instruction[1] ,out=w21 );
Mux(a=w20 ,b=w21 ,sel=instruction[2] ,out=w3 );
And(a=w3 ,b=instruction[15] ,out=loadforpc);
PC(in=A ,load=loadforpc ,inc=true ,reset=reset ,out[0..14]=pc );
}














