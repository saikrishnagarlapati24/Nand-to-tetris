// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
Mux16(a=x,b=false,sel=zx,out=x1);
Not16(in=x1,out=nx1);
Mux16(a=x1,b=nx1,sel=nx,out=X);

Mux16(a=y,b=false,sel=zy,out=y1);
Not16(in=y1,out=ny1);
Mux16(a=y1,b=ny1,sel=ny,out=Y);

Add16(a=X,b=Y,out=AddXY);
And16(a=X,b=Y,out=AndXY);
Mux16(a=AndXY,b=AddXY,sel=f,out=op);

Not16(in=op,out=nop);
Mux16(a=op,b=nop,sel=no,out[0..7]=out1,out[8..14]=out2,out[15]=omsb);
And16(a[0..7]=out1,a[8..14]=out2,a[15]=omsb,b[0..7]=out1,b[8..14]=out2,b[15]=omsb,out=out);

//Or8Way(in[0]=out[0],in[1]=out[1],in[2]=out[2],in[3]=out[3],in[4]=out[4],in[5]=out[5],in[6]=out[6],in[7]=out[7],out=o1); Output pin of the gate cannot be connected to //an internal gate.
//Or8Way(in[0]=out[8],in[1]=out[9],in[2]=out[10],in[3]=out[11],in[4]=out[12],in[5]=out[13],in[6]=out[14],in[7]=out[15],out=o2);

//Or8Way(in=out1[0..7],out=o1);      sub bus of an internal pin cannot be used.
//Or8Way(in=out1[8..15],out=o2);

Or8Way(in=out1,out=o1);
Or8Way(in[0..6]=out2,in[7]=omsb,out=o2);
Or(a=o1,b=o2,out=z);
Not(in=z,out=zr);

Or(a=omsb,b=omsb,out=ng);
}